#pragma kernel March

#include "Includes\MarchingTable.compute"


RWStructuredBuffer<float> weights;
RWStructuredBuffer<int> test;

static const float isoLevel = 0.5;
static const int numPointsPerAxis = 2; // Single cube


struct Triangle {
    float3 a, b, c;
};

AppendStructuredBuffer<Triangle> triangles;


void AddTriangle(float3 a, float3 b, float3 c)
{
    Triangle tri;
    tri.a = a;
    tri.b = b;
    tri.c = c;
    triangles.Append(tri);
}


int indexFromCoord(int x, int y, int z)
{
    return x + numPointsPerAxis * (y + numPointsPerAxis * z);
}

[numthreads(1, 1, 1)]
void March (uint3 id : SV_DispatchThreadID)
{

    const float cubeValues[8] = {
       weights[indexFromCoord(id.x, id.y, id.z + 1)],
       weights[indexFromCoord(id.x + 1, id.y, id.z + 1)],
       weights[indexFromCoord(id.x + 1, id.y, id.z)],
       weights[indexFromCoord(id.x, id.y, id.z)],
       weights[indexFromCoord(id.x, id.y + 1, id.z + 1)],
       weights[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)],
       weights[indexFromCoord(id.x + 1, id.y + 1, id.z)],
       weights[indexFromCoord(id.x, id.y + 1, id.z)]
    };


    int cubeIndex = 0;
    if (cubeValues[0] < isoLevel) cubeIndex |= 1;
    if (cubeValues[1] < isoLevel) cubeIndex |= 2;
    if (cubeValues[2] < isoLevel) cubeIndex |= 4;
    if (cubeValues[3] < isoLevel) cubeIndex |= 8;
    if (cubeValues[4] < isoLevel) cubeIndex |= 16;
    if (cubeValues[5] < isoLevel) cubeIndex |= 32;
    if (cubeValues[6] < isoLevel) cubeIndex |= 64;
    if (cubeValues[7] < isoLevel) cubeIndex |= 128;

    test[0] = cubeIndex;

    int edges[] = triTable[cubeIndex];

    for (int i = 0; edges[i] != -1; i += 3)
    {
        int edgeIndex = edges[i];

        int e0 = edgeConnections[edgeIndex][0];
        int e1 = edgeConnections[edgeIndex][1];

        float3 p0 = (corners[e0] + (isoLevel - cubeValues[e0]) * (corners[e1] - corners[e0]) / (cubeValues[e1] - cubeValues[e0])) + id;

        edgeIndex = edges[i + 1];

        e0 = edgeConnections[edgeIndex][0];
        e1 = edgeConnections[edgeIndex][1];

        float3 p1 = (corners[e0] + (isoLevel - cubeValues[e0]) * (corners[e1] - corners[e0]) / (cubeValues[e1] - cubeValues[e0])) + id;

        edgeIndex = edges[i + 2];
        
        e0 = edgeConnections[edgeIndex][0];
        e1 = edgeConnections[edgeIndex][1];

        float3 p2 = (corners[e0] + (isoLevel - cubeValues[e0]) * (corners[e1] - corners[e0]) / (cubeValues[e1] - cubeValues[e0])) + id;

        AddTriangle(p0, p1, p2);
    }
}
