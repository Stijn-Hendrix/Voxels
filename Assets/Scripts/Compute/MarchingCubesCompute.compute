#pragma kernel March

#include "Includes\MarchingTable.compute"

static const uint numThreads = 8;

RWStructuredBuffer<float> weights;

float isoLevel;
int chunkSize;

struct Triangle {
    float3 a, b, c;
};

AppendStructuredBuffer<Triangle> triangles;

int indexFromCoord(int x, int y, int z)
{
    return x + chunkSize * (y + chunkSize * z);
}

float3 interp(float3 p1, float w1, float3 p2, float w2)
{
    return (p1 + (isoLevel - w1) * (p2 - p1)  / (w2 - w1));
}

[numthreads(numThreads, numThreads, numThreads)]
void March (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= chunkSize - 1 || id.y >= chunkSize - 1 || id.z >= chunkSize - 1)
    {
        return;
    }

    float cubeValues[8] = {
       weights[indexFromCoord(id.x, id.y, id.z + 1)],
       weights[indexFromCoord(id.x + 1, id.y, id.z + 1)],
       weights[indexFromCoord(id.x + 1, id.y, id.z)],
       weights[indexFromCoord(id.x, id.y, id.z)],
       weights[indexFromCoord(id.x, id.y + 1, id.z + 1)],
       weights[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)],
       weights[indexFromCoord(id.x + 1, id.y + 1, id.z)],
       weights[indexFromCoord(id.x, id.y + 1, id.z)]
    };

    int cubeIndex = 0;
    for (int j = 0; j < 8; j++)
    {
        if (cubeValues[j] < isoLevel)
        {
            cubeIndex |= 1 << j;
        }
    }


    int edges[] = triTable[cubeIndex];

    for (int i = 0; edges[i] != -1; i += 3)
    {
        int e00 = edgeConnections[edges[i]][0];
        int e01 = edgeConnections[edges[i]][1];

        int e10 = edgeConnections[edges[i + 1]][0];
        int e11 = edgeConnections[edges[i + 1]][1];
        
        int e20 = edgeConnections[edges[i + 2]][0];
        int e21 = edgeConnections[edges[i + 2]][1];

        Triangle tri;
        tri.a = interp(corners[e00] + id, cubeValues[e00], corners[e01] + id, cubeValues[e01]);
        tri.b = interp(corners[e10] + id, cubeValues[e10], corners[e11] + id, cubeValues[e11]);
        tri.c = interp(corners[e20] + id, cubeValues[e20], corners[e21] + id, cubeValues[e21]);
        triangles.Append(tri);
    }
}
