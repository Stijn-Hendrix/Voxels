#pragma kernel GenerateNoise

#include "Includes\FastNoiseLite.compute"

static const uint numThreads = 8;

RWStructuredBuffer<float> weights;

int numPointsPerAxis;

float3 position;

float noiseScale;
float amplitude;

int indexFromCoord(int x, int y, int z)
{
    return x + numPointsPerAxis * (y + numPointsPerAxis * z);
}

[numthreads(numThreads, numThreads, numThreads)]
void GenerateNoise(uint3 id : SV_DispatchThreadID)
{
    fnl_state noise = fnlCreateState();
    noise.noise_type = FNL_NOISE_OPENSIMPLEX2;
    noise.fractal_type = FNL_FRACTAL_RIDGED;
    noise.frequency = 0.004;
    noise.octaves = 6;

    float3 pos = id + position;

    float ground = -pos.y + (0.2 * numPointsPerAxis);
    
    float n = ground + fnlGetNoise3D(noise, pos.x, pos.y, pos.z) * noiseScale * amplitude;

    weights[indexFromCoord(id.x, id.y, id.z)] = n;
}
