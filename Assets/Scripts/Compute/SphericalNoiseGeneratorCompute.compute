#pragma kernel GenerateNoise

#include "Includes\FastNoiseLite.compute"

static const uint numThreads = 8;

RWStructuredBuffer<float> _Weights;

int _ChunkSize;
float3 _Position;
float _NoiseScale;
float _Amplitude;
float _Frequency;
int _Octaves;
float _GroundPercent;

int indexFromCoord(int x, int y, int z)
{
    return x + _ChunkSize * (y + _ChunkSize * z);
}

[numthreads(numThreads, numThreads, numThreads)]
void GenerateNoise(uint3 id : SV_DispatchThreadID)
{
    fnl_state noise = fnlCreateState();
    noise.noise_type = FNL_NOISE_OPENSIMPLEX2;
    //noise.fractal_type = FNL_FRACTAL_RIDGED;
    noise.fractal_type = FNL_FRACTAL_FBM;
    noise.frequency = _Frequency;

    fnl_state r = fnlCreateState();
    r.noise_type = FNL_NOISE_OPENSIMPLEX2;
    r.fractal_type = FNL_FRACTAL_RIDGED;
    r.frequency = _Frequency + 0.005;
    r.octaves = _Octaves;

    float radius = 160;

    float3 pos = (id + _Position) * _NoiseScale;

    float ground = -pos.y + (_GroundPercent * _ChunkSize);
    float n = ground + fnlGetNoise3D(noise, pos.x, pos.y, pos.z) * _Amplitude;

    float ns = fnlGetNoise3D(noise, pos.x, pos.y, pos.z) + fnlGetNoise3D(r, pos.x, pos.y, pos.z);

    //_Weights[indexFromCoord(id.x, id.y, id.z)] = radius - length(pos) + fnlGetNoise3D(noise, pos.x, pos.y, pos.z) * _Amplitude;
    _Weights[indexFromCoord(id.x, id.y, id.z)] = radius - length(pos) + ns * _Amplitude;
}
